# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

name: 1.0.$(Rev:r)



variables:
  VersionNumber: 1.0.$(Rev:r)
  buildConfiguration: 'release'
  NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS: 20
  NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS: 20

pool:
  vmImage: 'windows-latest'

steps:

- script: echo $(Build.ArtifactStagingDirectory)

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.sln'
    feedsToUse: config
    nugetConfigPath: nuget.config  
    includeNuGetOrg: true
  
- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: 'src/*/*.csproj'
    arguments: '--no-restore --configuration  $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'run unit tests'
  inputs:
    command: 'test'
    projects: 'test/*/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'   

- task: DotNetCoreCLI@2
  displayName: 'Package component'
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    nobuild: true
    projects: 'src/*/*.csproj'
    versioningScheme: byBuildNumber
    

- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'
  inputs:
    forceReinstallCredentialProvider: true
- task: NuGetToolInstaller@1
- script: dotnet nuget push --source "CommonComponents" --api-key az $(Build.ArtifactStagingDirectory)\FileReader.Core.$(VersionNumber).nupkg
#- task: NuGetCommand@2
#  displayName: 'NuGet push'
#  inputs:
#    command: push
#    publishVstsFeed: 'Package Management and sharing code/CommonComponents'
#    allowPackageConflicts: true