# Build, pack and push component to project feed
# https://aka.ms/yaml

trigger:
- master

#Set Package version (so now ignores asemmbly version in .csproj)
name: 1.0.$(Rev:r)

variables:
  buildConfiguration: 'Release'
  #Set some timeout variables to prevent known issue with Nuget
  NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS: 20
  NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS: 20
  dotnetSdkVersion: '5.x'

pool:
  vmImage: 'windows-latest'

steps:

- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- script: echo $(Build.ArtifactStagingDirectory)
  displayName: 'Verify dotNet build output path'

- task: DotNetCoreCLI@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    projects: '**/*.sln'
    feedsToUse: config
    nugetConfigPath: nuget.config  
    includeNuGetOrg: true
  
- task: DotNetCoreCLI@2
  displayName: 'Build the project (without restoring packages)'
  inputs:
    command: 'build'
    projects: '**/*/*.csproj'
    arguments: '--no-restore --configuration  $(buildConfiguration)'

- task: WhiteSource@21
  displayName: 'Checking for open source vulnerabilities and licences - WhiteSource Bolt'
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)'

- task: SnykSecurityScan@0
  displayName: 'Checking for open source vulnerabilities and licences - Snyk'
  inputs:
    serviceConnectionEndpoint: 'Snyk Service Connection'
    testType: 'app'
    monitorOnBuild: true
    failOnIssues: false
    projectName: 'FileReader'
    testDirectory: '$(System.DefaultWorkingDirectory)'

- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'
  inputs:
    forceReinstallCredentialProvider: true

- script: dotnet nuget --version
  displayName: 'Verify dotNet Nuget version before upgrading'

#This next task isn't really required.
#As the Nuget environment variables fixed the problem.
#But it looks in the cache first anyway so kept in
- task: NuGetToolInstaller@1 
  displayName: 'Upgrade dotNet Nuget Version (checks cache first)'
  
- script: dotnet nuget --version  
  displayName: 'Verify dotNet Nuget version after upgrading'
  
- task: DotNetCoreCLI@2
  displayName: 'Install .NET tools from local manifest'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore --configfile nuget.config --ignore-failed-sources'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*/*.Tests.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Create code coverage report'
  inputs:
    command: custom
    custom: tool
    arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

- task: DotNetCoreCLI@2
  displayName: 'Package component'
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    nobuild: true
    projects: 'src/*/*.csproj'
    versioningScheme: byBuildNumber
    



- script: dotnet nuget push --source "CommonComponents" --api-key az $(Build.ArtifactStagingDirectory)\FileReader.Core.$(Build.BuildNumber).nupkg
  displayName: 'Push component to project feed'
  
#Apparently 
#- task: NuGetCommand@2
#  displayName: 'NuGet push'
#  inputs:
#    command: push
#    publishVstsFeed: 'Package Management and sharing code/CommonComponents'
#    allowPackageConflicts: true
